{
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getmintCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "maxMintAmountPerTx",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "maxSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_mintAmount",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "mintCost",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "mintCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "uriPrefix",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "uriSuffix",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "walletOfOwner",
            "outputs": [
                {
                    "internalType": "uint256[]",
                    "name": "",
                    "type": "uint256[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x36c226f5e8170092132e4a267486615e5e9c6cf1358dfb631a8f694046bb5f0e",
    "receipt": {
        "to": null,
        "from": "0x69f2301E037f1E35CC056a736758123460141d7a",
        "contractAddress": "0x06f36C3F77973317BEa50363A0F66646BcED7319",
        "transactionIndex": 2,
        "gasUsed": "3265283",
        "logsBloom": "0x
        "blockHash": "0xf65652fcfad044a70e1e82756e07a46e5d383cc8fce7f3b2dd711cb9f05d3ca1",
        "transactionHash": "0x36c226f5e8170092132e4a267486615e5e9c6cf1358dfb631a8f694046bb5f0e",
        "logs": [
            {
                "transactionIndex": 2,
                "blockNumber": 29776243,
                "transactionHash": "0x36c226f5e8170092132e4a267486615e5e9c6cf1358dfb631a8f694046bb5f0e",
                "address": "0x06f36C3F77973317BEa50363A0F66646BcED7319",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000069f2301e037f1e35cc056a736758123460141d7a"
                ],
                "data": "0x",
                "logIndex": 14,
                "blockHash": "0xf65652fcfad044a70e1e82756e07a46e5d383cc8fce7f3b2dd711cb9f05d3ca1"
            },
            {
                "transactionIndex": 2,
                "blockNumber": 29776243,
                "transactionHash": "0x36c226f5e8170092132e4a267486615e5e9c6cf1358dfb631a8f694046bb5f0e",
                "address": "0x0000000000000000000000000000000000001010",
                "topics": [
                    "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
                    "0x0000000000000000000000000000000000000000000000000000000000001010",
                    "0x00000000000000000000000069f2301e037f1e35cc056a736758123460141d7a",
                    "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
                ],
                "data": "0x000000000000000000000000000000000000000000000000001166a2e9f58d000000000000000000000000000000000000000000000000008a70219ca1cc27d0000000000000000000000000000000000000000000000976b7735c9cb7b586440000000000000000000000000000000000000000000000008a5ebaf9b7d69ad0000000000000000000000000000000000000000000000976b784c33fa1ab1344",
                "logIndex": 15,
                "blockHash": "0xf65652fcfad044a70e1e82756e07a46e5d383cc8fce7f3b2dd711cb9f05d3ca1"
            }
        ],
        "blockNumber": 29776243,
        "cumulativeGasUsed": "3735324",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "e100109c6c937ef49d93140102d90614",
    "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getmintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Doodles.sol\":\"Doodles\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Doodles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\r\\n/*\\r\\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - ++ - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\\r\\n+                                                                                                                      +\\r\\n+                                                                                                                      +\\r\\n.                                                                                                                      .\\r\\n.                                                    ####-                                                             .\\r\\n.                                        :*##:   .###-...:##                                                           .\\r\\n.                                        +#.:# :#+:........+#####+                                                     .\\r\\n.                                       .:#..#*=.................:#.                                                   .\\r\\n.                                     .#..*:.........:.........=-.-#                                                   .\\r\\n.                                      :+#-....:+**+^^+***__=**#:.*#                                                   .\\r\\n.                                      .#:.....:#              ^#.#                                                    .\\r\\n.                                      #:....-#^                 #                                                     .\\r\\n.                                      #-.....#    ++             +   ++                                               .\\r\\n.                                      .#.....+   +##+            .* +##+                                              .\\r\\n.                                       #.....#    ++  .######**.  #  ++                                               .\\r\\n.                                       #*  ^#^       *####--  ##. #                                                   .\\r\\n.                                      #:  #.         *####--  #*  #                                                   .\\r\\n.                                      #.   # :.       .###--  -# .+                                                   .\\r\\n.                                       #.   .#          ###--  # #                                                    .\\r\\n.                                        ^##^  #       .###--  =# *                                                    .\\r\\n.                                            #**#.     ###--  -*+**#                                                   .\\r\\n.                                            #***####**###--  +#****#                                                  .\\r\\n.                                           .##*********###--  #**##.                                                  .\\r\\n.                                          #************###--  #*****#                                                 .\\r\\n.                    ..:..                #*****#*******###--  #**#****###* *###                                       .\\r\\n.               .####*^^^^*###.          ##*****#******###--  #***#***#  :# #  :#                                      .\\r\\n.              :*             =#.        #******#*******##--  #***#***#  .# #  .#                 .####.               .\\r\\n.               ++#   ######.   #-  .*#####*****#*########--  #***#####  .# #  .#   .#######.   #*^   .^#+             .\\r\\n.                +#   #::::..#   #.#^^      ^#**#^       ^#- #**#^       .# #  .# +#^       ^# #+        #+            .\\r\\n.                .#   #      #   ##    .##.  .##.   .##.   # *#   .##.   .# #  .##.   -+#+.  # #   :######:            .\\r\\n.                .#   #     .#   #    #:::#   #.   #:::#   ###   #::::#  .# #  .##  :#####+  #.##     :...             .\\r\\n.                .#   #    .#.  :#   #   .#  .#   #    #   ##    #^   #  .# #  .##  .^     .##. *#+:.    .#            .\\r\\n.                .#   #####^    ##   #  :#.  .#   #  .#    ##    #   #.  .# #  .##   .=*######..##+###.   .#           .\\r\\n.                .#   ..      .###.   ###   .%#.   ###    *#-#    ###     # #  .##*   .      ####   ^     .#           .\\r\\n.                 #.   ..:-#####* #.      .*#  ##.      .##. :#._     _### ##.  #**#.     .:##. ##.     -##            .\\r\\n.                  ############*   =########    :########-     +#######^ ### ##### ^######++#^   ^#######+             .\\r\\n.                    ^*######*^      ^*##*^       ^*##*^         ^*###*^ ^##^ ^###^  ^*####*^      ^*##*^              .\\r\\n+                                                                                                                      +\\r\\n+                                                                                                                      +\\r\\n+ + + - - - - - - - - - - - - - - - - - - - - - - - - - - - ++ - - - - - - - - - - - - - - - - - - - - - - - - - - + + +\\r\\n*/\\r\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\r\\ncontract Doodles is ERC721, Ownable {\\r\\n    using Strings for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private supply;\\r\\n\\r\\n    string public uriPrefix =\\r\\n        \\\"ipfs://QmPMc4tcBsMqLRuCQtPmPe84bpSjrC3Ky7t3JWuHXYB4aS/\\\";\\r\\n    string public uriSuffix = \\\"\\\";\\r\\n\\r\\n    uint256 public mintCost = 0.01 ether;\\r\\n    uint256 public maxSupply = 10000;\\r\\n    uint256 public maxMintAmountPerTx = 2;\\r\\n    uint256 mintLimit = 2;\\r\\n    mapping(address => uint256) public mintCount;\\r\\n\\r\\n    constructor() ERC721(\\\"Doodles\\\", \\\"DOODLE\\\") {}\\r\\n\\r\\n    modifier mintRequire(uint256 _mintAmount) {\\r\\n        require(\\r\\n            _mintAmount > 0 && _mintAmount <= maxMintAmountPerTx,\\r\\n            \\\"Invalid mint amount!\\\"\\r\\n        );\\r\\n        require(\\r\\n            supply.current() + _mintAmount <= maxSupply,\\r\\n            \\\"Max supply exceeded!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return supply.current();\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _mintAmount) public payable mintRequire(_mintAmount) {\\r\\n        require(msg.value >= mintCost * _mintAmount, \\\"Insufficient funds!\\\");\\r\\n        require(\\r\\n            mintCount[msg.sender] + _mintAmount <= mintLimit,\\r\\n            \\\"public mint limit exceeded\\\"\\r\\n        );\\r\\n\\r\\n        _mintLoop(msg.sender, _mintAmount);\\r\\n        mintCount[msg.sender] += _mintAmount;\\r\\n    }\\r\\n\\r\\n    function getmintCount() public view returns (uint256) {\\r\\n        return mintCount[msg.sender];\\r\\n    }\\r\\n\\r\\n    function walletOfOwner(\\r\\n        address _owner\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        uint256 ownerTokenCount = balanceOf(_owner);\\r\\n        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\r\\n        uint256 currentTokenId = 1;\\r\\n        uint256 ownedTokenIndex = 0;\\r\\n\\r\\n        while (\\r\\n            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply\\r\\n        ) {\\r\\n            address currentTokenOwner = ownerOf(currentTokenId);\\r\\n\\r\\n            if (currentTokenOwner == _owner) {\\r\\n                ownedTokenIds[ownedTokenIndex] = currentTokenId;\\r\\n                ownedTokenIndex++;\\r\\n            }\\r\\n\\r\\n            currentTokenId++;\\r\\n        }\\r\\n\\r\\n        return ownedTokenIds;\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 _tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory currentBaseURI = _baseURI();\\r\\n        return\\r\\n            bytes(currentBaseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        currentBaseURI,\\r\\n                        _tokenId.toString(),\\r\\n                        uriSuffix\\r\\n                    )\\r\\n                )\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n\\r\\n    function _mintLoop(address _receiver, uint256 _mintAmount) internal {\\r\\n        for (uint256 i = 0; i < _mintAmount; i++) {\\r\\n            _safeMint(_receiver, supply.current());\\r\\n            supply.increment();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return uriPrefix;\\r\\n    }\\r\\n}\\r\\n// This is just a test NFT collections that helps decentralized Finance, NFT Finance, Social Finance and others kind Dapps building on testnet.\\r\\n\",\"keccak256\":\"0x0c53e08a607cccda2a9fa95a4c3324bdd03200992eb16e536c9e00e5ab4dfa97\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x6080604052604051806060016040528060368152602001620039476036913960089080519060200190620000359291906200021b565b5060405180602001604052806000815250600990805190602001906200005d9291906200021b565b50662386f26fc10000600a55612710600b556002600c556002600d553480156200008657600080fd5b506040518060400160405280600781526020017f446f6f646c6573000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f444f4f444c45000000000000000000000000000000000000000000000000000081525081600090805190602001906200010b9291906200021b565b508060019080519060200190620001249291906200021b565b505050620001476200013b6200014d60201b60201c565b6200015560201b60201c565b6200032f565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200022990620002fa565b90600052602060002090601f0160209004810192826200024d576000855562000299565b82601f106200026857805160ff191683800117855562000299565b8280016001018555821562000299579182015b82811115620002985782518255916020019190600101906200027b565b5b509050620002a89190620002ac565b5090565b5b80821115620002c7576000816000905550600101620002ad565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200031357607f821691505b602082108103620003295762000328620002cb565b5b50919050565b613608806200033f6000396000f3fe60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063d5abeb0111610064578063d5abeb01146105a9578063e985e9c5146105d4578063ed9ec88814610611578063f2fde38b1461064e5761019c565b8063b88d4fde14610518578063bdb4b84814610541578063c87b56dd1461056c5761019c565b806394354fd0116100c657806394354fd01461047d57806395d89b41146104a8578063a0712d68146104d3578063a22cb465146104ef5761019c565b806370a08231146103fe578063715018a61461043b5780638da5cb5b146104525761019c565b80633ccfd60b116101595780635503a0e8116101335780635503a0e8146103405780635619f4431461036b57806362b99ad4146103965780636352211e146103c15761019c565b80633ccfd60b146102c357806342842e0e146102da578063438b6300146103035761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806318160ddd1461026f57806323b872dd1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612208565b610677565b6040516101d59190612250565b60405180910390f35b3480156101ea57600080fd5b506101f3610759565b6040516102009190612304565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b919061235c565b6107eb565b60405161023d91906123ca565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190612411565b610831565b005b34801561027b57600080fd5b50610284610948565b6040516102919190612460565b60405180910390f35b3480156102a657600080fd5b506102c160048036038101906102bc919061247b565b610959565b005b3480156102cf57600080fd5b506102d86109b9565b005b3480156102e657600080fd5b5061030160048036038101906102fc919061247b565b610a41565b005b34801561030f57600080fd5b5061032a600480360381019061032591906124ce565b610a61565b60405161033791906125b9565b60405180910390f35b34801561034c57600080fd5b50610355610b6b565b6040516103629190612304565b60405180910390f35b34801561037757600080fd5b50610380610bf9565b60405161038d9190612460565b60405180910390f35b3480156103a257600080fd5b506103ab610c40565b6040516103b89190612304565b60405180910390f35b3480156103cd57600080fd5b506103e860048036038101906103e3919061235c565b610cce565b6040516103f591906123ca565b60405180910390f35b34801561040a57600080fd5b50610425600480360381019061042091906124ce565b610d7f565b6040516104329190612460565b60405180910390f35b34801561044757600080fd5b50610450610e36565b005b34801561045e57600080fd5b50610467610e4a565b60405161047491906123ca565b60405180910390f35b34801561048957600080fd5b50610492610e74565b60405161049f9190612460565b60405180910390f35b3480156104b457600080fd5b506104bd610e7a565b6040516104ca9190612304565b60405180910390f35b6104ed60048036038101906104e8919061235c565b610f0c565b005b3480156104fb57600080fd5b5061051660048036038101906105119190612607565b6110fa565b005b34801561052457600080fd5b5061053f600480360381019061053a919061277c565b611110565b005b34801561054d57600080fd5b50610556611172565b6040516105639190612460565b60405180910390f35b34801561057857600080fd5b50610593600480360381019061058e919061235c565b611178565b6040516105a09190612304565b60405180910390f35b3480156105b557600080fd5b506105be611222565b6040516105cb9190612460565b60405180910390f35b3480156105e057600080fd5b506105fb60048036038101906105f691906127ff565b611228565b6040516106089190612250565b60405180910390f35b34801561061d57600080fd5b50610638600480360381019061063391906124ce565b6112bc565b6040516106459190612460565b60405180910390f35b34801561065a57600080fd5b50610675600480360381019061067091906124ce565b6112d4565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610752575061075182611357565b5b9050919050565b6060600080546107689061286e565b80601f01602080910402602001604051908101604052809291908181526020018280546107949061286e565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b60006107f6826113c1565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061083c82610cce565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390612911565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108cb61140c565b73ffffffffffffffffffffffffffffffffffffffff1614806108fa57506108f9816108f461140c565b611228565b5b610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906129a3565b60405180910390fd5b6109438383611414565b505050565b600061095460076114cd565b905090565b61096a61096461140c565b826114db565b6109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a090612a35565b60405180910390fd5b6109b4838383611570565b505050565b6109c16117d6565b60006109cb610e4a565b73ffffffffffffffffffffffffffffffffffffffff16476040516109ee90612a86565b60006040518083038185875af1925050503d8060008114610a2b576040519150601f19603f3d011682016040523d82523d6000602084013e610a30565b606091505b5050905080610a3e57600080fd5b50565b610a5c83838360405180602001604052806000815250611110565b505050565b60606000610a6e83610d7f565b905060008167ffffffffffffffff811115610a8c57610a8b612651565b5b604051908082528060200260200182016040528015610aba5781602001602082028036833780820191505090505b50905060006001905060005b8381108015610ad75750600b548211155b15610b5f576000610ae783610cce565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4b5782848381518110610b3057610b2f612a9b565b5b6020026020010181815250508180610b4790612af9565b9250505b8280610b5690612af9565b93505050610ac6565b82945050505050919050565b60098054610b789061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba49061286e565b8015610bf15780601f10610bc657610100808354040283529160200191610bf1565b820191906000526020600020905b815481529060010190602001808311610bd457829003601f168201915b505050505081565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60088054610c4d9061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c799061286e565b8015610cc65780601f10610c9b57610100808354040283529160200191610cc6565b820191906000526020600020905b815481529060010190602001808311610ca957829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90612b8d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690612c1f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e3e6117d6565b610e486000611854565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c5481565b606060018054610e899061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb59061286e565b8015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b5050505050905090565b80600081118015610f1f5750600c548111155b610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5590612c8b565b60405180910390fd5b600b5481610f6c60076114cd565b610f769190612cab565b1115610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90612d4d565b60405180910390fd5b81600a54610fc59190612d6d565b341015611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90612e13565b60405180910390fd5b600d5482600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110559190612cab565b1115611096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108d90612e7f565b60405180910390fd5b6110a0338361191a565b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ef9190612cab565b925050819055505050565b61110c61110561140c565b838361195a565b5050565b61112161111b61140c565b836114db565b611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790612a35565b60405180910390fd5b61116c84848484611ac6565b50505050565b600a5481565b606061118382611b22565b6111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b990612f11565b60405180910390fd5b60006111cc611b8e565b905060008151116111ec576040518060200160405280600081525061121a565b806111f684611c20565b600960405160200161120a93929190613001565b6040516020818303038152906040525b915050919050565b600b5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600e6020528060005260406000206000915090505481565b6112dc6117d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361134b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611342906130a4565b60405180910390fd5b61135481611854565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6113ca81611b22565b611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140090612b8d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661148783610cce565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000806114e783610cce565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061152957506115288185611228565b5b8061156757508373ffffffffffffffffffffffffffffffffffffffff1661154f846107eb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661159082610cce565b73ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90613136565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c906131c8565b60405180910390fd5b611660838383611d80565b61166b600082611414565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116bb91906131e8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117129190612cab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117d1838383611d85565b505050565b6117de61140c565b73ffffffffffffffffffffffffffffffffffffffff166117fc610e4a565b73ffffffffffffffffffffffffffffffffffffffff1614611852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184990613268565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005b81811015611955576119388361193360076114cd565b611d8a565b6119426007611da8565b808061194d90612af9565b91505061191d565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf906132d4565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ab99190612250565b60405180910390a3505050565b611ad1848484611570565b611add84848484611dbe565b611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390613366565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060088054611b9d9061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc99061286e565b8015611c165780601f10611beb57610100808354040283529160200191611c16565b820191906000526020600020905b815481529060010190602001808311611bf957829003601f168201915b5050505050905090565b606060008203611c67576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611d7b565b600082905060005b60008214611c99578080611c8290612af9565b915050600a82611c9291906133b5565b9150611c6f565b60008167ffffffffffffffff811115611cb557611cb4612651565b5b6040519080825280601f01601f191660200182016040528015611ce75781602001600182028036833780820191505090505b5090505b60008514611d7457600182611d0091906131e8565b9150600a85611d0f91906133e6565b6030611d1b9190612cab565b60f81b818381518110611d3157611d30612a9b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611d6d91906133b5565b9450611ceb565b8093505050505b919050565b505050565b505050565b611da4828260405180602001604052806000815250611f45565b5050565b6001816000016000828254019250508190555050565b6000611ddf8473ffffffffffffffffffffffffffffffffffffffff16611fa0565b15611f38578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e0861140c565b8786866040518563ffffffff1660e01b8152600401611e2a949392919061346c565b6020604051808303816000875af1925050508015611e6657506040513d601f19601f82011682018060405250810190611e6391906134cd565b60015b611ee8573d8060008114611e96576040519150601f19603f3d011682016040523d82523d6000602084013e611e9b565b606091505b506000815103611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790613366565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611f3d565b600190505b949350505050565b611f4f8383611fc3565b611f5c6000848484611dbe565b611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613366565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202990613546565b60405180910390fd5b61203b81611b22565b1561207b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612072906135b2565b60405180910390fd5b61208760008383611d80565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120d79190612cab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461219860008383611d85565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121e5816121b0565b81146121f057600080fd5b50565b600081359050612202816121dc565b92915050565b60006020828403121561221e5761221d6121a6565b5b600061222c848285016121f3565b91505092915050565b60008115159050919050565b61224a81612235565b82525050565b60006020820190506122656000830184612241565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122a557808201518184015260208101905061228a565b838111156122b4576000848401525b50505050565b6000601f19601f8301169050919050565b60006122d68261226b565b6122e08185612276565b93506122f0818560208601612287565b6122f9816122ba565b840191505092915050565b6000602082019050818103600083015261231e81846122cb565b905092915050565b6000819050919050565b61233981612326565b811461234457600080fd5b50565b60008135905061235681612330565b92915050565b600060208284031215612372576123716121a6565b5b600061238084828501612347565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123b482612389565b9050919050565b6123c4816123a9565b82525050565b60006020820190506123df60008301846123bb565b92915050565b6123ee816123a9565b81146123f957600080fd5b50565b60008135905061240b816123e5565b92915050565b60008060408385031215612428576124276121a6565b5b6000612436858286016123fc565b925050602061244785828601612347565b9150509250929050565b61245a81612326565b82525050565b60006020820190506124756000830184612451565b92915050565b600080600060608486031215612494576124936121a6565b5b60006124a2868287016123fc565b93505060206124b3868287016123fc565b92505060406124c486828701612347565b9150509250925092565b6000602082840312156124e4576124e36121a6565b5b60006124f2848285016123fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61253081612326565b82525050565b60006125428383612527565b60208301905092915050565b6000602082019050919050565b6000612566826124fb565b6125708185612506565b935061257b83612517565b8060005b838110156125ac5781516125938882612536565b975061259e8361254e565b92505060018101905061257f565b5085935050505092915050565b600060208201905081810360008301526125d3818461255b565b905092915050565b6125e481612235565b81146125ef57600080fd5b50565b600081359050612601816125db565b92915050565b6000806040838503121561261e5761261d6121a6565b5b600061262c858286016123fc565b925050602061263d858286016125f2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612689826122ba565b810181811067ffffffffffffffff821117156126a8576126a7612651565b5b80604052505050565b60006126bb61219c565b90506126c78282612680565b919050565b600067ffffffffffffffff8211156126e7576126e6612651565b5b6126f0826122ba565b9050602081019050919050565b82818337600083830152505050565b600061271f61271a846126cc565b6126b1565b90508281526020810184848401111561273b5761273a61264c565b5b6127468482856126fd565b509392505050565b600082601f83011261276357612762612647565b5b813561277384826020860161270c565b91505092915050565b60008060008060808587031215612796576127956121a6565b5b60006127a4878288016123fc565b94505060206127b5878288016123fc565b93505060406127c687828801612347565b925050606085013567ffffffffffffffff8111156127e7576127e66121ab565b5b6127f38782880161274e565b91505092959194509250565b60008060408385031215612816576128156121a6565b5b6000612824858286016123fc565b9250506020612835858286016123fc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061288657607f821691505b6020821081036128995761289861283f565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006128fb602183612276565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061298d603e83612276565b915061299882612931565b604082019050919050565b600060208201905081810360008301526129bc81612980565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612a1f602e83612276565b9150612a2a826129c3565b604082019050919050565b60006020820190508181036000830152612a4e81612a12565b9050919050565b600081905092915050565b50565b6000612a70600083612a55565b9150612a7b82612a60565b600082019050919050565b6000612a9182612a63565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b0482612326565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b3657612b35612aca565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b77601883612276565b9150612b8282612b41565b602082019050919050565b60006020820190508181036000830152612ba681612b6a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c09602983612276565b9150612c1482612bad565b604082019050919050565b60006020820190508181036000830152612c3881612bfc565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b6000612c75601483612276565b9150612c8082612c3f565b602082019050919050565b60006020820190508181036000830152612ca481612c68565b9050919050565b6000612cb682612326565b9150612cc183612326565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cf657612cf5612aca565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b6000612d37601483612276565b9150612d4282612d01565b602082019050919050565b60006020820190508181036000830152612d6681612d2a565b9050919050565b6000612d7882612326565b9150612d8383612326565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612dbc57612dbb612aca565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b6000612dfd601383612276565b9150612e0882612dc7565b602082019050919050565b60006020820190508181036000830152612e2c81612df0565b9050919050565b7f7075626c6963206d696e74206c696d6974206578636565646564000000000000600082015250565b6000612e69601a83612276565b9150612e7482612e33565b602082019050919050565b60006020820190508181036000830152612e9881612e5c565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612efb602f83612276565b9150612f0682612e9f565b604082019050919050565b60006020820190508181036000830152612f2a81612eee565b9050919050565b600081905092915050565b6000612f478261226b565b612f518185612f31565b9350612f61818560208601612287565b80840191505092915050565b60008190508160005260206000209050919050565b60008154612f8f8161286e565b612f998186612f31565b94506001821660008114612fb45760018114612fc557612ff8565b60ff19831686528186019350612ff8565b612fce85612f6d565b60005b83811015612ff057815481890152600182019150602081019050612fd1565b838801955050505b50505092915050565b600061300d8286612f3c565b91506130198285612f3c565b91506130258284612f82565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061308e602683612276565b915061309982613032565b604082019050919050565b600060208201905081810360008301526130bd81613081565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613120602583612276565b915061312b826130c4565b604082019050919050565b6000602082019050818103600083015261314f81613113565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006131b2602483612276565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b60006131f382612326565b91506131fe83612326565b92508282101561321157613210612aca565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613252602083612276565b915061325d8261321c565b602082019050919050565b6000602082019050818103600083015261328181613245565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006132be601983612276565b91506132c982613288565b602082019050919050565b600060208201905081810360008301526132ed816132b1565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613350603283612276565b915061335b826132f4565b604082019050919050565b6000602082019050818103600083015261337f81613343565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c082612326565b91506133cb83612326565b9250826133db576133da613386565b5b828204905092915050565b60006133f182612326565b91506133fc83612326565b92508261340c5761340b613386565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061343e82613417565b6134488185613422565b9350613458818560208601612287565b613461816122ba565b840191505092915050565b600060808201905061348160008301876123bb565b61348e60208301866123bb565b61349b6040830185612451565b81810360608301526134ad8184613433565b905095945050505050565b6000815190506134c7816121dc565b92915050565b6000602082840312156134e3576134e26121a6565b5b60006134f1848285016134b8565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613530602083612276565b915061353b826134fa565b602082019050919050565b6000602082019050818103600083015261355f81613523565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061359c601c83612276565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b905091905056fea264697066735822122052ae51202b0258d29bee0d767d41dc4b0d9133df4a4ad1e34f460975f0460c1f64736f6c634300080e0033697066733a2f2f516d504d6334746342734d714c5275435174506d506538346270536a7243334b793774334a5775485859423461532f",
    "deployedBytecode": "0x60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063d5abeb0111610064578063d5abeb01146105a9578063e985e9c5146105d4578063ed9ec88814610611578063f2fde38b1461064e5761019c565b8063b88d4fde14610518578063bdb4b84814610541578063c87b56dd1461056c5761019c565b806394354fd0116100c657806394354fd01461047d57806395d89b41146104a8578063a0712d68146104d3578063a22cb465146104ef5761019c565b806370a08231146103fe578063715018a61461043b5780638da5cb5b146104525761019c565b80633ccfd60b116101595780635503a0e8116101335780635503a0e8146103405780635619f4431461036b57806362b99ad4146103965780636352211e146103c15761019c565b80633ccfd60b146102c357806342842e0e146102da578063438b6300146103035761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806318160ddd1461026f57806323b872dd1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612208565b610677565b6040516101d59190612250565b60405180910390f35b3480156101ea57600080fd5b506101f3610759565b6040516102009190612304565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b919061235c565b6107eb565b60405161023d91906123ca565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190612411565b610831565b005b34801561027b57600080fd5b50610284610948565b6040516102919190612460565b60405180910390f35b3480156102a657600080fd5b506102c160048036038101906102bc919061247b565b610959565b005b3480156102cf57600080fd5b506102d86109b9565b005b3480156102e657600080fd5b5061030160048036038101906102fc919061247b565b610a41565b005b34801561030f57600080fd5b5061032a600480360381019061032591906124ce565b610a61565b60405161033791906125b9565b60405180910390f35b34801561034c57600080fd5b50610355610b6b565b6040516103629190612304565b60405180910390f35b34801561037757600080fd5b50610380610bf9565b60405161038d9190612460565b60405180910390f35b3480156103a257600080fd5b506103ab610c40565b6040516103b89190612304565b60405180910390f35b3480156103cd57600080fd5b506103e860048036038101906103e3919061235c565b610cce565b6040516103f591906123ca565b60405180910390f35b34801561040a57600080fd5b50610425600480360381019061042091906124ce565b610d7f565b6040516104329190612460565b60405180910390f35b34801561044757600080fd5b50610450610e36565b005b34801561045e57600080fd5b50610467610e4a565b60405161047491906123ca565b60405180910390f35b34801561048957600080fd5b50610492610e74565b60405161049f9190612460565b60405180910390f35b3480156104b457600080fd5b506104bd610e7a565b6040516104ca9190612304565b60405180910390f35b6104ed60048036038101906104e8919061235c565b610f0c565b005b3480156104fb57600080fd5b5061051660048036038101906105119190612607565b6110fa565b005b34801561052457600080fd5b5061053f600480360381019061053a919061277c565b611110565b005b34801561054d57600080fd5b50610556611172565b6040516105639190612460565b60405180910390f35b34801561057857600080fd5b50610593600480360381019061058e919061235c565b611178565b6040516105a09190612304565b60405180910390f35b3480156105b557600080fd5b506105be611222565b6040516105cb9190612460565b60405180910390f35b3480156105e057600080fd5b506105fb60048036038101906105f691906127ff565b611228565b6040516106089190612250565b60405180910390f35b34801561061d57600080fd5b50610638600480360381019061063391906124ce565b6112bc565b6040516106459190612460565b60405180910390f35b34801561065a57600080fd5b50610675600480360381019061067091906124ce565b6112d4565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061074257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610752575061075182611357565b5b9050919050565b6060600080546107689061286e565b80601f01602080910402602001604051908101604052809291908181526020018280546107949061286e565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b5050505050905090565b60006107f6826113c1565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061083c82610cce565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390612911565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108cb61140c565b73ffffffffffffffffffffffffffffffffffffffff1614806108fa57506108f9816108f461140c565b611228565b5b610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906129a3565b60405180910390fd5b6109438383611414565b505050565b600061095460076114cd565b905090565b61096a61096461140c565b826114db565b6109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a090612a35565b60405180910390fd5b6109b4838383611570565b505050565b6109c16117d6565b60006109cb610e4a565b73ffffffffffffffffffffffffffffffffffffffff16476040516109ee90612a86565b60006040518083038185875af1925050503d8060008114610a2b576040519150601f19603f3d011682016040523d82523d6000602084013e610a30565b606091505b5050905080610a3e57600080fd5b50565b610a5c83838360405180602001604052806000815250611110565b505050565b60606000610a6e83610d7f565b905060008167ffffffffffffffff811115610a8c57610a8b612651565b5b604051908082528060200260200182016040528015610aba5781602001602082028036833780820191505090505b50905060006001905060005b8381108015610ad75750600b548211155b15610b5f576000610ae783610cce565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4b5782848381518110610b3057610b2f612a9b565b5b6020026020010181815250508180610b4790612af9565b9250505b8280610b5690612af9565b93505050610ac6565b82945050505050919050565b60098054610b789061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba49061286e565b8015610bf15780601f10610bc657610100808354040283529160200191610bf1565b820191906000526020600020905b815481529060010190602001808311610bd457829003601f168201915b505050505081565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60088054610c4d9061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c799061286e565b8015610cc65780601f10610c9b57610100808354040283529160200191610cc6565b820191906000526020600020905b815481529060010190602001808311610ca957829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6d90612b8d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690612c1f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e3e6117d6565b610e486000611854565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c5481565b606060018054610e899061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb59061286e565b8015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b5050505050905090565b80600081118015610f1f5750600c548111155b610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5590612c8b565b60405180910390fd5b600b5481610f6c60076114cd565b610f769190612cab565b1115610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90612d4d565b60405180910390fd5b81600a54610fc59190612d6d565b341015611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90612e13565b60405180910390fd5b600d5482600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110559190612cab565b1115611096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108d90612e7f565b60405180910390fd5b6110a0338361191a565b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ef9190612cab565b925050819055505050565b61110c61110561140c565b838361195a565b5050565b61112161111b61140c565b836114db565b611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790612a35565b60405180910390fd5b61116c84848484611ac6565b50505050565b600a5481565b606061118382611b22565b6111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b990612f11565b60405180910390fd5b60006111cc611b8e565b905060008151116111ec576040518060200160405280600081525061121a565b806111f684611c20565b600960405160200161120a93929190613001565b6040516020818303038152906040525b915050919050565b600b5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600e6020528060005260406000206000915090505481565b6112dc6117d6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361134b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611342906130a4565b60405180910390fd5b61135481611854565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6113ca81611b22565b611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140090612b8d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661148783610cce565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6000806114e783610cce565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061152957506115288185611228565b5b8061156757508373ffffffffffffffffffffffffffffffffffffffff1661154f846107eb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661159082610cce565b73ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90613136565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c906131c8565b60405180910390fd5b611660838383611d80565b61166b600082611414565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116bb91906131e8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117129190612cab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117d1838383611d85565b505050565b6117de61140c565b73ffffffffffffffffffffffffffffffffffffffff166117fc610e4a565b73ffffffffffffffffffffffffffffffffffffffff1614611852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184990613268565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60005b81811015611955576119388361193360076114cd565b611d8a565b6119426007611da8565b808061194d90612af9565b91505061191d565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf906132d4565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611ab99190612250565b60405180910390a3505050565b611ad1848484611570565b611add84848484611dbe565b611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390613366565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060088054611b9d9061286e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc99061286e565b8015611c165780601f10611beb57610100808354040283529160200191611c16565b820191906000526020600020905b815481529060010190602001808311611bf957829003601f168201915b5050505050905090565b606060008203611c67576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611d7b565b600082905060005b60008214611c99578080611c8290612af9565b915050600a82611c9291906133b5565b9150611c6f565b60008167ffffffffffffffff811115611cb557611cb4612651565b5b6040519080825280601f01601f191660200182016040528015611ce75781602001600182028036833780820191505090505b5090505b60008514611d7457600182611d0091906131e8565b9150600a85611d0f91906133e6565b6030611d1b9190612cab565b60f81b818381518110611d3157611d30612a9b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611d6d91906133b5565b9450611ceb565b8093505050505b919050565b505050565b505050565b611da4828260405180602001604052806000815250611f45565b5050565b6001816000016000828254019250508190555050565b6000611ddf8473ffffffffffffffffffffffffffffffffffffffff16611fa0565b15611f38578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611e0861140c565b8786866040518563ffffffff1660e01b8152600401611e2a949392919061346c565b6020604051808303816000875af1925050508015611e6657506040513d601f19601f82011682018060405250810190611e6391906134cd565b60015b611ee8573d8060008114611e96576040519150601f19603f3d011682016040523d82523d6000602084013e611e9b565b606091505b506000815103611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790613366565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611f3d565b600190505b949350505050565b611f4f8383611fc3565b611f5c6000848484611dbe565b611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613366565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202990613546565b60405180910390fd5b61203b81611b22565b1561207b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612072906135b2565b60405180910390fd5b61208760008383611d80565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120d79190612cab565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461219860008383611d85565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121e5816121b0565b81146121f057600080fd5b50565b600081359050612202816121dc565b92915050565b60006020828403121561221e5761221d6121a6565b5b600061222c848285016121f3565b91505092915050565b60008115159050919050565b61224a81612235565b82525050565b60006020820190506122656000830184612241565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122a557808201518184015260208101905061228a565b838111156122b4576000848401525b50505050565b6000601f19601f8301169050919050565b60006122d68261226b565b6122e08185612276565b93506122f0818560208601612287565b6122f9816122ba565b840191505092915050565b6000602082019050818103600083015261231e81846122cb565b905092915050565b6000819050919050565b61233981612326565b811461234457600080fd5b50565b60008135905061235681612330565b92915050565b600060208284031215612372576123716121a6565b5b600061238084828501612347565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006123b482612389565b9050919050565b6123c4816123a9565b82525050565b60006020820190506123df60008301846123bb565b92915050565b6123ee816123a9565b81146123f957600080fd5b50565b60008135905061240b816123e5565b92915050565b60008060408385031215612428576124276121a6565b5b6000612436858286016123fc565b925050602061244785828601612347565b9150509250929050565b61245a81612326565b82525050565b60006020820190506124756000830184612451565b92915050565b600080600060608486031215612494576124936121a6565b5b60006124a2868287016123fc565b93505060206124b3868287016123fc565b92505060406124c486828701612347565b9150509250925092565b6000602082840312156124e4576124e36121a6565b5b60006124f2848285016123fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61253081612326565b82525050565b60006125428383612527565b60208301905092915050565b6000602082019050919050565b6000612566826124fb565b6125708185612506565b935061257b83612517565b8060005b838110156125ac5781516125938882612536565b975061259e8361254e565b92505060018101905061257f565b5085935050505092915050565b600060208201905081810360008301526125d3818461255b565b905092915050565b6125e481612235565b81146125ef57600080fd5b50565b600081359050612601816125db565b92915050565b6000806040838503121561261e5761261d6121a6565b5b600061262c858286016123fc565b925050602061263d858286016125f2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612689826122ba565b810181811067ffffffffffffffff821117156126a8576126a7612651565b5b80604052505050565b60006126bb61219c565b90506126c78282612680565b919050565b600067ffffffffffffffff8211156126e7576126e6612651565b5b6126f0826122ba565b9050602081019050919050565b82818337600083830152505050565b600061271f61271a846126cc565b6126b1565b90508281526020810184848401111561273b5761273a61264c565b5b6127468482856126fd565b509392505050565b600082601f83011261276357612762612647565b5b813561277384826020860161270c565b91505092915050565b60008060008060808587031215612796576127956121a6565b5b60006127a4878288016123fc565b94505060206127b5878288016123fc565b93505060406127c687828801612347565b925050606085013567ffffffffffffffff8111156127e7576127e66121ab565b5b6127f38782880161274e565b91505092959194509250565b60008060408385031215612816576128156121a6565b5b6000612824858286016123fc565b9250506020612835858286016123fc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061288657607f821691505b6020821081036128995761289861283f565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006128fb602183612276565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061298d603e83612276565b915061299882612931565b604082019050919050565b600060208201905081810360008301526129bc81612980565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612a1f602e83612276565b9150612a2a826129c3565b604082019050919050565b60006020820190508181036000830152612a4e81612a12565b9050919050565b600081905092915050565b50565b6000612a70600083612a55565b9150612a7b82612a60565b600082019050919050565b6000612a9182612a63565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b0482612326565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b3657612b35612aca565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b77601883612276565b9150612b8282612b41565b602082019050919050565b60006020820190508181036000830152612ba681612b6a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c09602983612276565b9150612c1482612bad565b604082019050919050565b60006020820190508181036000830152612c3881612bfc565b9050919050565b7f496e76616c6964206d696e7420616d6f756e7421000000000000000000000000600082015250565b6000612c75601483612276565b9150612c8082612c3f565b602082019050919050565b60006020820190508181036000830152612ca481612c68565b9050919050565b6000612cb682612326565b9150612cc183612326565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cf657612cf5612aca565b5b828201905092915050565b7f4d617820737570706c7920657863656564656421000000000000000000000000600082015250565b6000612d37601483612276565b9150612d4282612d01565b602082019050919050565b60006020820190508181036000830152612d6681612d2a565b9050919050565b6000612d7882612326565b9150612d8383612326565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612dbc57612dbb612aca565b5b828202905092915050565b7f496e73756666696369656e742066756e64732100000000000000000000000000600082015250565b6000612dfd601383612276565b9150612e0882612dc7565b602082019050919050565b60006020820190508181036000830152612e2c81612df0565b9050919050565b7f7075626c6963206d696e74206c696d6974206578636565646564000000000000600082015250565b6000612e69601a83612276565b9150612e7482612e33565b602082019050919050565b60006020820190508181036000830152612e9881612e5c565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612efb602f83612276565b9150612f0682612e9f565b604082019050919050565b60006020820190508181036000830152612f2a81612eee565b9050919050565b600081905092915050565b6000612f478261226b565b612f518185612f31565b9350612f61818560208601612287565b80840191505092915050565b60008190508160005260206000209050919050565b60008154612f8f8161286e565b612f998186612f31565b94506001821660008114612fb45760018114612fc557612ff8565b60ff19831686528186019350612ff8565b612fce85612f6d565b60005b83811015612ff057815481890152600182019150602081019050612fd1565b838801955050505b50505092915050565b600061300d8286612f3c565b91506130198285612f3c565b91506130258284612f82565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061308e602683612276565b915061309982613032565b604082019050919050565b600060208201905081810360008301526130bd81613081565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613120602583612276565b915061312b826130c4565b604082019050919050565b6000602082019050818103600083015261314f81613113565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006131b2602483612276565b91506131bd82613156565b604082019050919050565b600060208201905081810360008301526131e1816131a5565b9050919050565b60006131f382612326565b91506131fe83612326565b92508282101561321157613210612aca565b5b828203905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613252602083612276565b915061325d8261321c565b602082019050919050565b6000602082019050818103600083015261328181613245565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006132be601983612276565b91506132c982613288565b602082019050919050565b600060208201905081810360008301526132ed816132b1565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613350603283612276565b915061335b826132f4565b604082019050919050565b6000602082019050818103600083015261337f81613343565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c082612326565b91506133cb83612326565b9250826133db576133da613386565b5b828204905092915050565b60006133f182612326565b91506133fc83612326565b92508261340c5761340b613386565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061343e82613417565b6134488185613422565b9350613458818560208601612287565b613461816122ba565b840191505092915050565b600060808201905061348160008301876123bb565b61348e60208301866123bb565b61349b6040830185612451565b81810360608301526134ad8184613433565b905095945050505050565b6000815190506134c7816121dc565b92915050565b6000602082840312156134e3576134e26121a6565b5b60006134f1848285016134b8565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613530602083612276565b915061353b826134fa565b602082019050919050565b6000602082019050818103600083015261355f81613523565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061359c601c83612276565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b905091905056fea264697066735822122052ae51202b0258d29bee0d767d41dc4b0d9133df4a4ad1e34f460975f0460c1f64736f6c634300080e0033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
            },
            "balanceOf(address)": {
                "details": "See {IERC721-balanceOf}."
            },
            "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
            },
            "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
            },
            "name()": {
                "details": "See {IERC721Metadata-name}."
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "ownerOf(uint256)": {
                "details": "See {IERC721-ownerOf}."
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
            },
            "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
            },
            "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
            },
            "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
            },
            "symbol()": {
                "details": "See {IERC721Metadata-symbol}."
            },
            "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 138,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
            },
            {
                "astId": 140,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
            },
            {
                "astId": 144,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 148,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 152,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 158,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            },
            {
                "astId": 7,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "_owner",
                "offset": 0,
                "slot": "6",
                "type": "t_address"
            },
            {
                "astId": 2479,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "supply",
                "offset": 0,
                "slot": "7",
                "type": "t_struct(Counter)1463_storage"
            },
            {
                "astId": 2482,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "uriPrefix",
                "offset": 0,
                "slot": "8",
                "type": "t_string_storage"
            },
            {
                "astId": 2485,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "uriSuffix",
                "offset": 0,
                "slot": "9",
                "type": "t_string_storage"
            },
            {
                "astId": 2488,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "mintCost",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
            },
            {
                "astId": 2491,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "maxSupply",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
            },
            {
                "astId": 2494,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "maxMintAmountPerTx",
                "offset": 0,
                "slot": "12",
                "type": "t_uint256"
            },
            {
                "astId": 2497,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "mintLimit",
                "offset": 0,
                "slot": "13",
                "type": "t_uint256"
            },
            {
                "astId": 2501,
                "contract": "contracts/Doodles.sol:Doodles",
                "label": "mintCount",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_address,t_uint256)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(Counter)1463_storage": {
                "encoding": "inplace",
                "label": "struct Counters.Counter",
                "members": [
                    {
                        "astId": 1462,
                        "contract": "contracts/Doodles.sol:Doodles",
                        "label": "_value",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
